;;;/// Applicative programming ///;;;
;;; Les fonctions applicatives prennent
;;; des fonctions en arguments et les appliquent
;;; à des élements d'une liste de différente façon.

;;; funcall permet d'appeler une fonction
;;; #' est un quote spécial qui indique qu'on quote une fonction
;;; et non un symbole pointant sur une fonction!
;;; Attention ne fonctionne qu'avec les fonctions ordinaires
;;; (pas if par exemple)
;;; #'cons est un équivalent à (function cons)
(funcall #'cons 'a 'b) ;;;Renvoi (a . b)

;;; mapcar applique une fonction prenant un paramètre à
;;; tous les élements d'une liste.
(defun square (x) (* x x))
(mapcar #'square '(1 2 3 4 5)) ;;;Renvoi (1 4 9 16 25)

;;; Utilisation de lambda avec mapcar
(mapcar #'(lambda (n) (* n n)) '(1 2 3 4 5))


;;; Quand on utilise plusieurs listes dans
;;; les arguments de mapcar, on appelle
;;; la fonction deux à deux
(mapcar #'+ '(1 2 3 4 5) '(10 20 30 40 50 60))
;;; Renvoi : (11 22 33 44 55) ;;;Supprime les élements en trop

;;; Autres fonctions applicatives
(find-if #'oddp '(2 4 6 7 8 9)) ;;; Renvoi le premier élement de la liste
                                ;;; qui suit le prédicat
                                ;;; sinon retourne nil
(remove-if #'oddp '(1 2 3 4 5)) ;;; Renvoi (2 4) (tous les nombres impaires)
(remove-if-not #'oddp '(1 2 3 4 5)) ;;; Renvoi (1 3 5)

;;; Reduce réduit une liste en une seule valeur en utilisant
;;; une fonction.
(reduce #'+ '(1 2 3)) ;;; Renvoi 6

(reduce #'append ((one un) (two deux) (three trois)))
;;; Renvoi : (one un two deux three trois)

;;; every renvoi vrai uniqumement si tous les élements de
;;; la liste sont à vrai
(every #'numberp '(1 2 3 4 5)) ;;; Renvoi t
(every #'numberp '(1 2 A 4 B)) ;;; Renvoi nil

;;; Créé un lexical scope qui peut ensuite être
;;; utilisé dans une fonction applicative
;;; Si on utilise pas lambda, le contexte sera
;;; global et on ne pourra pas accéder à la variable
;;; x dans l'appel de fonction
;;; (voir le scoping et les lexical closures
;;; en lisp pour plus d'infos)
(defun make-greater-than-predicate (n)
#'(lambda (x) (> x n)))
